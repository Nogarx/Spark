
#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################

import pytest
import typing as tp
import spark.core.utils as utils

#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################

@pytest.mark.parametrize(
    'input_shape, expected_shape', 
    [
        (1, (1,)),
        ([1,2,3], (1,2,3)),
        ((1,2,3), (1,2,3)),
        ({1,2,3}, (1,2,3)),
    ]
)
def test_validate_shapes(input_shape: int | list[int] | tuple[int, ...] | set[int], expected_shape: tuple[int, ...]):
    """
        Tests various inputs that should normalize to a single tuple shape.
    """
    assert utils.validate_shape(input_shape) == expected_shape

#-----------------------------------------------------------------------------------------------------------------------------------------------#

@pytest.mark.parametrize(
    'input_list, expected_list',
    [
        ([[1]], [(1,)]),
        ([(1,)], [(1,)]),
        ([{1,}], [(1,)]),
        ([[1], [2,3], [4,5,6]], [(1,), (2,3), (4,5,6)]),
        ([(1,), (2,3), (4,5,6)], [(1,), (2,3), (4,5,6)]),
        ([{1,}, {2,3}, {4,5,6}], [(1,), (2,3), (4,5,6)]),
        ([[1], (2,3), {4,5,6}], [(1,), (2,3), (4,5,6)]),
        (([1], [2,3], [4,5,6]), [(1,), (2,3), (4,5,6)]),
        (((1,), (2,3), (4,5,6)), [(1,), (2,3), (4,5,6)]),
        (({1,}, {2,3}, {4,5,6}), [(1,), (2,3), (4,5,6)]),
        (([1], (2,3), {4,5,6}), [(1,), (2,3), (4,5,6)]),
    ]
)
def test_validate_list_of_shapes(input_list: list | tuple | set, expected_list: list[tuple[int, ...]]):
    """
        Tests various inputs that should normalize to a list of tuple shapes.
    """
    assert utils.validate_list_shape(input_list) == expected_list

#-----------------------------------------------------------------------------------------------------------------------------------------------#

@pytest.mark.parametrize(
    'input_shape, output', 
    [
        (1, True),
        ([1,2,3], True),
        ((1,2,3), True),
        ({1,2,3}, True),
        ([[1]], False),
        ([(1,)], False),
        ([{1,}], False),
        ([[1], [2,3], [4,5,6]], False),
        ([(1,), (2,3), (4,5,6)], False),
        ([{1,}, {2,3}, {4,5,6}], False),
        ([[1], (2,3), {4,5,6}], False),
        (([1], [2,3], [4,5,6]), False),
        (((1,), (2,3), (4,5,6)), False),
        (({1,}, {2,3}, {4,5,6}), False),
        (([1], (2,3), {4,5,6}), False),
        ({(1,), (2,3), (4,5,6)}, False),
        (3.14, False),
        ('hello', False),
        ({'shape': (2, 2)}, False),
        (None, False),
        ([], False),
        ([[]], False),
        ([{}], False),
        ([[[1]]], False),
        ([[[1],[2]]], False),
        ([[(1,)]], False),
        ([[(1,),(2,)]], False),
        ([[{1}]], False),
        ([[{1},{2}]], False),
    ]
)
def test_is_shape(input_shape: tp.Any, output: bool):
    """
        Tests various inputs that should normalize to a single tuple shape.
    """
    assert utils.is_shape(input_shape) == output

#-----------------------------------------------------------------------------------------------------------------------------------------------#

@pytest.mark.parametrize(
    'input_list, output', 
    [
        (1, False),
        ([1,2,3], False),
        ((1,2,3), False),
        ({1,2,3}, False),
        ([[1]], True),
        ([(1,)], True),
        ([{1,}], True),
        ([[1], [2,3], [4,5,6]], True),
        ([(1,), (2,3), (4,5,6)], True),
        ([{1,}, {2,3}, {4,5,6}], True),
        ([[1], (2,3), {4,5,6}], True),
        (([1], [2,3], [4,5,6]), True),
        (((1,), (2,3), (4,5,6)), True),
        (({1,}, {2,3}, {4,5,6}), True),
        (([1], (2,3), {4,5,6}), True),
        ({(1,), (2,3), (4,5,6)}, True),
        (3.14, False),
        ('hello', False),
        ({'shape': (2, 2)}, False),
        (None, False),
        ([], False),
        ([[]], False),
        ([{}], False),
        ([[[1]]], False),
        ([[[1],[2]]], False),
        ([[(1,)]], False),
        ([[(1,),(2,)]], False),
        ([[{1}]], False),
        ([[{1},{2}]], False),
    ]
)
def test_is_list_shape(input_list: tp.Any, output: bool):
    """
        Tests various inputs that should normalize to a single tuple shape.
    """
    assert utils.is_list_shape(input_list) == output

#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################