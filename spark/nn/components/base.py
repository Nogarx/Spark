#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################

from __future__ import annotations

import abc
from typing import Dict
from spark.core.module import SparkModule
from spark.core.payloads import SparkPayload

#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################

class Component(SparkModule, abc.ABC):
    """
        Abstract neruonal component.
    """

    def __init__(self, 
                 params: Dict = {},
                 **kwargs):
        # Initialize super.
        super().__init__(**kwargs)
        # Initialize variables
        self._params = params

    @abc.abstractmethod
    def reset(self):
        """
            Resets component state.
        """
        pass
    
    @abc.abstractmethod
    def __call__(self, *args: SparkPayload, **kwargs) -> Dict[str, SparkPayload]:
        """
            Computes the control flow operation.
        """
        pass
    
#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################