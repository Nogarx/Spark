#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################

from __future__ import annotations

import typing as tp
from spark.core.payloads import FloatArray
from spark.nn.components.base import Component, ComponentConfig

#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################

# Generic LearningRule output contract.
class LearningRuleOutput(tp.TypedDict):
    kernel: FloatArray

#-----------------------------------------------------------------------------------------------------------------------------------------------#

class LearningRuleConfig(ComponentConfig):
    pass
ConfigT = tp.TypeVar("ConfigT", bound=LearningRuleConfig)

#-----------------------------------------------------------------------------------------------------------------------------------------------#

class LearningRule(Component, tp.Generic[ConfigT]):
    """
        Abstract learning rule model.
    """

    def __init__(self, config: ConfigT | None = None, **kwargs) -> None:
        # Initialize super.
        super().__init__(config = config, **kwargs)

#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################