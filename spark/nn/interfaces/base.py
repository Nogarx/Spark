#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from spark.core.payloads import SparkPayload
    
import abc
import typing as tp
from spark.core.module import SparkModule
from spark.core.config import SparkConfig

#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################

class InterfaceOutput(tp.TypedDict):
    pass

#-----------------------------------------------------------------------------------------------------------------------------------------------#

class InterfaceConfig(SparkConfig):
    pass
ConfigT = tp.TypeVar("ConfigT", bound=InterfaceConfig)

#-----------------------------------------------------------------------------------------------------------------------------------------------#

class Interface(SparkModule, abc.ABC, tp.Generic[ConfigT]):
    """
        Abstract interface model.
    """
    config: ConfigT

    def __init__(self, config: ConfigT | None = None, **kwargs):
        # Main attributes
        super().__init__(config = config, **kwargs)

    @abc.abstractmethod
    def __call__(self, *args: SparkPayload, **kwargs) -> InterfaceOutput:
        """
            Computes the control flow operation.
        """
        pass
    
#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################