#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from spark.core.payloads import SparkPayload

import abc
import typing as tp
from spark.core.payloads import SpikeArray
from spark.nn.interfaces.base import Interface, InterfaceConfig

#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################

# Generic InputInterface output contract.
class InputInterfaceOutput(tp.TypedDict):
    spikes: SpikeArray

#-----------------------------------------------------------------------------------------------------------------------------------------------#

class InputInterfaceConfig(InterfaceConfig):
    pass
ConfigT = tp.TypeVar("ConfigT", bound=InputInterfaceConfig)

#-----------------------------------------------------------------------------------------------------------------------------------------------#

class InputInterface(Interface, abc.ABC, tp.Generic[ConfigT]):
    """
        Abstract input interface model.
    """
    config: ConfigT

    def __init__(self, config: ConfigT | None = None, **kwargs):
        # Main attributes
        super().__init__(config = config, **kwargs)

    @abc.abstractmethod
    def __call__(self, *args: SparkPayload, **kwargs) -> InputInterfaceOutput:
        """
            Transform the input signal into an Spike signal.
        """
        pass

#################################################################################################################################################
#-----------------------------------------------------------------------------------------------------------------------------------------------#
#################################################################################################################################################