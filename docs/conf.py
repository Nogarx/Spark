# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import inspect
import operator
import os
from pathlib import Path
from shlex import join
import sys

sys.path.insert(0, os.path.abspath('..'))

# Workaround to avoid expanding type aliases. See:
# https://github.com/sphinx-doc/sphinx/issues/6518#issuecomment-589613836
from typing import ForwardRef

def _do_not_evaluate_in_spark(
    self, globalns, *args, _evaluate=ForwardRef._evaluate, **kwargs,
):
  if globalns.get('__name__', '').startswith('spark'):
    return self
  return _evaluate(self, globalns, *args, **kwargs)

ForwardRef._evaluate = _do_not_evaluate_in_spark

# -- Project information -----------------------------------------------------

project = 'Spark'
copyright = '2025, Mario Franco'
author = 'Mario Franco'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = ''


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
#needs_sphinx = '2.1'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.intersphinx',
    'sphinx.ext.linkcode',
    'sphinx.ext.mathjax',
    'sphinx.ext.napoleon',
    'myst_nb',
    'sphinx_remove_toctrees',
    'sphinx_copybutton',
    'sphinx_design',
    'sphinxext.rediraffe',
    'autoapi.extension',
    #'matplotlib.sphinxext.plot_directive',
    #'sphinxcontrib.mermaid'
    #'sphinx_toolbox.more_autodoc.genericalias',
]

intersphinx_mapping = {
    'array_api': ('https://data-apis.org/array-api/2023.12/', None),
    'python': ('https://docs.python.org/3/', None),
    'numpy': ('https://numpy.org/doc/stable/', None),
    'scipy': ('https://docs.scipy.org/doc/scipy/reference/', None),
    'jax': ('https://docs.jax.dev/en/latest/', None),
    'flax': ('https://flax.readthedocs.io/en/stable/', None),
}

suppress_warnings = [
    'ref.citation',
    'ref.footnote',
    'myst.header',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# Note: important to list ipynb before md here: we have both md and ipynb
# copies of each notebook, and myst will choose which to convert based on
# the order in the source_suffix list. Notebooks which are not executed have
# outputs stored in ipynb but not in md, so we must convert the ipynb.
source_suffix = [
   '.rst', 
   '.ipynb', 
   '.md'
]

# The main toctree document.
main_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set 'language' from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [
    '_build', 
    'Thumbs.db', 
    '.DS_Store',
]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


autosummary_generate = True
napolean_use_rtype = False

# mathjax_config = {
#     'TeX': {'equationNumbers': {'autoNumber': 'AMS', 'useLabelIds': True}},
# }

# Additional files needed for generating LaTeX/PDF output:
# latex_additional_files = ['references.bib']

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_book_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    'show_toc_level': 2,
    'repository_url': 'https://github.com/Nogarx/Spark',
    'use_repository_button': True,
    'navigation_with_keys': False,
    'article_header_start': ['toggle-primary-sidebar.html', 'breadcrumbs'],
}

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = '_static/spark_250px.png'

html_favicon = '_static/spark_favicon.png'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named 'default.css' will overwrite the builtin 'default.css'.
html_static_path = ['_static']

html_css_files = [
    'style.css',
]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

# -- Options for myst ----------------------------------------------
myst_heading_anchors = 3  # auto-generate 3 levels of heading anchors
myst_enable_extensions = ['dollarmath']
myst_ref_domains = ['py']
myst_all_links_external = False
nb_execution_mode = 'force'
nb_execution_allow_errors = False
nb_merge_streams = True
nb_execution_show_tb = True

# Notebook cell execution timeout; defaults to 30.
nb_execution_timeout = 100

# List of patterns, relative to source directory, that match notebook
# files that will not be executed.
nb_execution_excludepatterns = [
]

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
#htmlhelp_basename = 'JAXdoc'

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (main_doc, 'spark', 'Spark Documentation',
     [author], 1)
]

# -- Extension configuration -------------------------------------------------
# Define prompt text pattern to be removed for copybutton
# See  https://sphinx-copybutton.readthedocs.io/en/latest/use.html#using-regexp-prompt-identifiers
copybutton_prompt_text = r'>>> |\.\.\. |\$ |In \[\d*\]: | {2,5}\.\.\.: | {5,8}: '
copybutton_prompt_is_regexp = True

# Tell sphinx autodoc how to render type aliases.
autodoc_typehints = 'description'
autodoc_typehints_description_target = 'all'
autodoc_type_aliases = {
    'ArrayLike': 'jax.typing.ArrayLike',
    'DTypeLike': 'jax.typing.DTypeLike',
    'spark.nn.components.somas.*': 'spark.nn.somas.*'
}
autodoc_default_options = {
    'autosummary': True,
}

# Remove auto-generated API docs from sidebars. They take too long to build.
remove_from_toctrees = ['_autosummary/*']

# Autoapi configuration
autoapi_dirs = ['../spark']
autoapi_options = [
    'members',
    'undoc-members',
    'show-inheritance',
    'show-module-summary',
    'special-members',
    'imported-members',
]
autoapi_python_class_content = 'both'
autoapi_own_page_level = 'module'
autoapi_add_toctree_entry = True
autoapi_keep_files = False
autoapi_ignore = [
    #'*/core/*',
    #'*/graph_editor/*',
    '*/tests/*',
]

# Customize code links via sphinx.ext.linkcode
def linkcode_resolve(domain, info):

    if domain != 'py':
        return None
    if not info['module']:
        return None
    if not info['fullname']:
        return None
    if info['module'].split('.')[0] != 'spark':
        return None
    # TODO: Fix filename for shortcut classes
    filename = info['module'].replace('.', '/')
    return f'https://github.com/Nogarx/Spark/blob/main/{filename}.py'


rediraffe_redirects = {
}